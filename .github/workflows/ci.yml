name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '**.rst'
      - '.github/*.md'
      - 'examples/**'
      - 'MANIFEST.in'
      - '.pre-commit-config.yaml'
      - 'README*'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '**.rst'
      - '.github/*.md'
      - 'examples/**'
      - 'MANIFEST.in'
      - '.pre-commit-config.yaml'
      - 'README*'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run ruff
        run: |
          ruff check .
          ruff format --check .

      - name: Run isort
        run: |
          isort --check --diff .

      - name: Run mypy
        run: |
          mypy yaml_resume_builder

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -e ".[dev]"

      - name: Run Bandit security scan
        run: |
          bandit -r yaml_resume_builder/ -x yaml_resume_builder/tests/ -ll

      - name: Check dependencies with Safety
        run: |
          safety check --full-report --ignore 51457

  test-ubuntu:
    name: Test Python 3.8 on Ubuntu
    runs-on: ubuntu-latest
    needs: [lint, security]
    # Skip tests if manually triggered with run_tests=false
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.run_tests != 'false' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -e ".[dev]"

      # Cache LaTeX installation to speed up builds
      - name: Cache LaTeX installation
        id: cache-latex
        uses: actions/cache@v4
        with:
          path: /tmp/texlive
          key: ubuntu-texlive-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ubuntu-texlive-

      - name: Install LaTeX
        if: steps.cache-latex.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra latexmk

      - name: Verify LaTeX installation
        run: |
          which latexmk || echo "LaTeX installation failed, but continuing with tests"
          latexmk -v || echo "latexmk command not working properly"

      - name: Test with pytest (verbose)
        run: |
          # Run tests with verbose output
          python -m pytest --cov=yaml_resume_builder --cov-report=xml -v
        env:
          PYTHONUNBUFFERED: 1

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build Package
    runs-on: ubuntu-latest
    # Run build even if tests are skipped
    needs: [lint, security]
    if: ${{ always() && (needs.lint.result == 'success' && needs.security.result == 'success') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Store built package
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

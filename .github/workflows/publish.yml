name: Publish to PyPI

on:
  release:
    types: [created]
  push:
    branches: [main]
    paths:
      - 'pyproject.toml'
      - 'yaml_resume_builder/__init__.py'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        default: ''

jobs:
  deploy:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Update version if manually triggered
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Update version in pyproject.toml
          sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"$VERSION\"/" pyproject.toml
          # Update version in __init__.py
          sed -i "s/__version__ = \"[0-9]*\.[0-9]*\.[0-9]*\"/__version__ = \"$VERSION\"/" yaml_resume_builder/__init__.py

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Check if version exists on PyPI
        id: version_check
        run: |
          # Extract package name and version from pyproject.toml
          PACKAGE_NAME=$(grep -m 1 'name = ' pyproject.toml | sed 's/name = "\(.*\)"/\1/')
          PACKAGE_VERSION=$(grep -m 1 'version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Checking if version $PACKAGE_VERSION of package $PACKAGE_NAME exists on PyPI"

          # Check if the specific version exists on PyPI
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/project/$PACKAGE_NAME/$PACKAGE_VERSION/")

          if [ "$HTTP_STATUS" = "200" ]; then
            # Version already exists
            echo "Version $PACKAGE_VERSION of package $PACKAGE_NAME already exists on PyPI."
            echo "Skipping publish step."
            echo "should_publish=false" >> $GITHUB_OUTPUT
          elif [ "$HTTP_STATUS" = "404" ]; then
            # Version doesn't exist, check if package exists
            PACKAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/project/$PACKAGE_NAME/")

            if [ "$PACKAGE_STATUS" = "200" ]; then
              echo "Package $PACKAGE_NAME exists on PyPI, but version $PACKAGE_VERSION is new."
              echo "Will publish new version."
              echo "should_publish=true" >> $GITHUB_OUTPUT
            elif [ "$PACKAGE_STATUS" = "404" ]; then
              echo "Package $PACKAGE_NAME is new on PyPI."
              echo "Will publish new package."
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "Unexpected status code: $PACKAGE_STATUS when checking package name."
              echo "Continuing with publish step."
              echo "should_publish=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "Unexpected status code: $HTTP_STATUS when checking version."
            echo "Continuing with publish step."
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to PyPI
        if: steps.version_check.outputs.should_publish == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
